{"version":3,"sources":["Form.js","services/persons.js","Person.js","Sort.js","Notification.js","App.js","index.js"],"names":["Form","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","baseUrl","axios","get","personObject","post","id","delete","updatedObject","put","Person","person","remove","name","number","onClick","Sort","nameFind","handleSearch","Notification","message","includes","className","App","useState","persons","setPersons","setNewName","newItem","setNewItem","setNewNumber","setNameFind","errorMes","setErrorMes","useEffect","personHandle","then","response","data","showAll","personsToShow","filter","toLowerCase","event","preventDefault","i","list","length","target","concat","toggle","forEach","window","confirm","map","setTimeout","catch","error","console","log","p","del","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.342c355c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.addName}>\r\n        <div>\r\n          name: <input value={props.newName} onChange={props.handleNameChange}/>\r\n        </div>\r\n        <div>\r\n          number: <input value={props.newNumber} onChange={props.handleNumberChange}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default Form","import axios from 'axios'\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = personObject => {\r\n    return axios.post(baseUrl, personObject)\r\n}\r\n\r\nconst del = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst update = (id, updatedObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, updatedObject)\r\n}\r\n\r\nexport default { getAll, create, del, update }","import React from 'react'\r\nimport personHandle from './services/persons'\r\n\r\nconst Person = ({ person, remove }) => {      \r\n    return (\r\n        <div>\r\n            {person.name} {person.number} <button onClick = {remove}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Sort = ({nameFind, handleSearch}) => {\r\n    return (\r\n        <div>\r\n            filter shown with <input value={nameFind} onChange={handleSearch}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sort","const Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    else if (message.includes(\"Added\") || (message.includes(\"Updated\"))) {\r\n        return (\r\n            <div className = \"success\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className = \"error\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useEffect, useState } from 'react'\r\nimport Form from './Form.js'\r\nimport Person from './Person.js'\r\nimport Sort from './Sort.js'\r\nimport personHandle from './services/persons'\r\nimport Notification from './Notification'\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newItem, setNewItem ] = useState([])\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [nameFind, setNameFind] = useState('')\r\n  const [errorMes, setErrorMes] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personHandle\r\n      .getAll()\r\n      .then(response => {\r\n        setPersons(response.data)\r\n      })\r\n    }, [])\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    // if (newItem.includes(newName)) {\r\n    //   setErrorMes(`${newName} is already added to phonebook`)\r\n    //   setTimeout(() => {\r\n    //     setErrorMes(null)\r\n    //   }, 5000)\r\n    // }\r\n    let toggle = false\r\n    let id = \"\" \r\n\r\n    persons.forEach(person => {\r\n      if (person.name === newName) {\r\n        toggle = true\r\n        id = person.id\r\n      }\r\n    })\r\n    \r\n    if (toggle) {\r\n     if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber,\r\n        id: id\r\n      }\r\n      personHandle\r\n        .update(id, personObject)\r\n        .then(response => {\r\n          toggle = false\r\n          setPersons(persons.map(person => person.name !== newName ? person : personObject))\r\n          setNewItem(newItem.concat(newName))\r\n          setErrorMes(`Updated ${personObject.name}`)\r\n          setTimeout (() => {\r\n            setErrorMes(null)\r\n          }, 5000)\r\n          })\r\n      }\r\n    }\r\n    else {\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n      personHandle\r\n        .create(personObject)\r\n        .then(response => {\r\n          setPersons(persons.concat(personObject))\r\n          setNewItem(newItem.concat(newName))\r\n          setErrorMes(`Added ${personObject.name}`)\r\n          setTimeout (() => {\r\n            setErrorMes(null)\r\n          }, 5000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error.response.data)\r\n          setErrorMes(`${error.response.data.error}`)\r\n          setTimeout (() => {\r\n            setErrorMes(null)\r\n          }, 5000)\r\n        })\r\n\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  const [showAll, setShowAll] = useState(false)\r\n  \r\n  const handleSearch = (event) => {\r\n    event.preventDefault()\r\n    let list = []\r\n    let i\r\n    for (i = 0; i < persons.length; i++) {\r\n      if (persons[i].name.toLowerCase().includes(event.target.value)) {\r\n        setNameFind(event.target.value)\r\n        list = list.concat(persons[i])\r\n        // setPersons(persons.filter(x=>x.name.includes(event.target.value)))\r\n      }\r\n      else setNameFind(event.target.value)\r\n    }\r\n  }\r\n\r\n  const del = (person) => {\r\n    personHandle\r\n      .getAll()\r\n      .then(response => {\r\n        if (window.confirm(`Delete ${person.name}?`)) {\r\n          personHandle\r\n          .del(person.id)\r\n          setPersons(persons.filter(p => p.id !== person.id))\r\n          setErrorMes(`Deleted ${person.name}`)\r\n          setTimeout (() => {\r\n            setErrorMes(null)\r\n          }, 5000)\r\n        }\r\n      })\r\n\r\n    personHandle.getAll(response => console.log(response.data))\r\n    }\r\n\r\n  const personsToShow = showAll\r\n    ? persons\r\n    : persons.filter(person => person.name.toLowerCase().includes(nameFind.toLowerCase()))\r\n\r\n\r\n      // if (newItem[i].toLowerCase.includes(nameFind.toLowerCase)) {\r\n      //   setShowAll(persons[i])\r\n      // }\r\n      \r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={errorMes}/>\r\n      <Sort \r\n        nameFind = {nameFind}\r\n        handleSearch = {handleSearch}/>\r\n        <h2>Add a new</h2>\r\n\r\n      <Form\r\n        addName={addName} \r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}/>\r\n      <h2>Numbers</h2>\r\n      {personsToShow.map(person =>\r\n        <Person key={person.name} person={person} remove={() => del(person)}/>\r\n        )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}